add_subdirectory(ARTSynchronized)
#add_subdirectory(adaptive-radix-tree)
add_subdirectory(abseil-cpp)
add_subdirectory(googletest)
add_subdirectory(masstree-beta)
add_subdirectory(nlohmann_json)
add_subdirectory(phtree-cpp)
add_subdirectory(robin-hood-hashing)
add_subdirectory(robin-map)
add_subdirectory(sparse-map)
add_subdirectory(tlx)

# Disable some warnings for the third-party subfolder
add_compile_options(-Wno-deprecated-dynamic-exception-spec -Wno-unused-function -Wno-deprecated-declarations)
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    add_compile_options(-Wno-format-overflow -Wno-stringop-truncation -Wno-stringop-overflow)
endif()

# jemalloc
if(NOT APPLE)
  # Only configure jemalloc for non-Apple builds, as we cannot properly replace the allocator on Mac using static linking:
  #   If you ./configure jemalloc with --with-jemalloc-prefix="" on OSX and static link the library, your malloc's will
  #   be handled by jemalloc. However, dynamically linked libraries will still use the default system zone. That is, any
  #   *.so files that get dynamically linked to your application will not use jemalloc, even if the main object file has
  #   been statically linked to jemalloc. This is different from linux. On linux, if the main object file is statically
  #   linked to jemalloc, then all malloc's performed by libraries dynamically linked to your application will go
  #   through jemalloc.
  #  https://github.com/exabytes18/jemalloc-example
  set(JEMALLOC_LIB_PATH ${CMAKE_CURRENT_BINARY_DIR}/jemalloc/lib/libjemalloc.so)

  if(CMAKE_CURRENT_SOURCE_DIR MATCHES "[ \t\r\n]" OR CMAKE_CURRENT_BINARY_DIR MATCHES "[ \t\r\n]")
    # It looks like `--prefix=<...>` does not work too well if the prefix has a whitespace. We did not spend too long
    # trying to get this to work as (1) this is easy to fix by the user, (2) it has only come up once in a long time, and
    # (3) Makefiles are notoriously bad with spaces: http://savannah.gnu.org/bugs/?712
    message(FATAL_ERROR "jemalloc cannot be built with whitespaces in the directory path. Please make sure IMIB is being compiled with a path not containing any whitespaces.")
  endif()

  include(ExternalProject)
  set(JEMALLOC_COMPILER_ENVIRONMENT "CC=\"${CMAKE_C_COMPILER_LAUNCHER} ${CMAKE_C_COMPILER}\" CXX=\"${CMAKE_CXX_COMPILER_LAUNCHER} ${CMAKE_CXX_COMPILER}\"")
  externalproject_add(
      libjemalloc

      SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/jemalloc
      BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/jemalloc
      # Executing autoconf and the configure script with suppressed output, only printing it in case of non-zero return
      CONFIGURE_COMMAND bash -c "cd <SOURCE_DIR> && if [ ! -f ./configure ] $<SEMICOLON> then autoconf $<SEMICOLON> fi && \
                                 cd <BINARY_DIR> && output=$(${JEMALLOC_COMPILER_ENVIRONMENT} <SOURCE_DIR>/configure --prefix=<BINARY_DIR> 2>&1) || \
                                 (printf \"$output\\n\" && false)"
      BUILD_COMMAND bash -c "output=$(${MAC_INCLUDES} make 2>&1) || (printf \"$output\\n\" && false)"
      INSTALL_COMMAND false  # install should never be called, this is a safe guard that fails if it is
      STEP_TARGETS build
      BUILD_BYPRODUCTS ${JEMALLOC_LIB_PATH}
  )

  file(GLOB_RECURSE JEMALLOC_FILES ${CMAKE_CURRENT_SOURCE_DIR}/jemalloc/*)
  externalproject_add_step(
    libjemalloc
    check_for_changes
    # Make sure that we rebuild jemalloc when a file changes
    DEPENDERS configure
    DEPENDS "${JEMALLOC_FILES}"
    COMMAND bash -c "(cd ${CMAKE_CURRENT_BINARY_DIR}/jemalloc && make distclean >/dev/null 2>/dev/null) || true"
  )
  add_library(jemalloc SHARED IMPORTED GLOBAL)
  add_dependencies(jemalloc libjemalloc-build)  # ...-build is generated by STEP_TARGETS
  set_target_properties(jemalloc PROPERTIES IMPORTED_LOCATION ${JEMALLOC_LIB_PATH})
endif()

# bb-tree
set(BB_TREE_DIR bb-tree)

add_library(
    bb-tree
  
    ${BB_TREE_DIR}/src/BBTree.cpp
    ${BB_TREE_DIR}/src/BBTreeBucket.cpp
)

target_include_directories(
    bb-tree

    PUBLIC
    ${BB_TREE_DIR}/include/
)

target_compile_options(
    bb-tree

    PRIVATE
    -fPIC
)

# BwTree
add_library(
    BwTree

    BwTree/src/bwtree.cpp
)

target_compile_options(
    BwTree

    PRIVATE
    -fPIC
)

# cssl
add_library(
  cssl

  cssl/skiplist.c
)

target_include_directories(
  cssl

  PUBLIC
  cssl
)

target_compile_options(
    cssl

    PRIVATE
    -mavx
    -O3
    -std=gnu99
)

# judy-template
set(JUDY_DIR judy-template)

add_library(
  judy
  STATIC

  ${JUDY_DIR}/src/judy.c
  ${JUDY_DIR}/src/judy.h
  ${JUDY_DIR}/src/judyL2Array.h
  ${JUDY_DIR}/src/judyLArray.h
  ${JUDY_DIR}/src/judyS2Array.h
  ${JUDY_DIR}/src/judySArray.h
)

target_include_directories(
  judy

  PUBLIC
  ${JUDY_DIR}/src
)

target_compile_options(
    judy

    PRIVATE
    -march=native
    -fPIC
    -Wno-parentheses
)

# skip_list
set(SKIP_LIST_DIR skip_list)

add_library(
  skip_list
  STATIC

  ${SKIP_LIST_DIR}/skip_list.h
  ${SKIP_LIST_DIR}/skip_list_detail.h
)

target_include_directories(
  skip_list

  PUBLIC
  ${SKIP_LIST_DIR}
)

set_target_properties(skip_list PROPERTIES LINKER_LANGUAGE CXX)

target_compile_options(
  skip_list

  PRIVATE
  -O3
)
